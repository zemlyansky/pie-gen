// Generated by Haxe 3.4.4
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_PieChartGen
#include <PieChartGen.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5f3781822f02f8a3_29_normalizeValues,"PieChartGen","normalizeValues",0x784fa97f,"PieChartGen.normalizeValues","Lib.hx",29,0x191c80b9)
HX_LOCAL_STACK_FRAME(_hx_pos_5f3781822f02f8a3_24_normalizeValues,"PieChartGen","normalizeValues",0x784fa97f,"PieChartGen.normalizeValues","Lib.hx",24,0x191c80b9)
HX_LOCAL_STACK_FRAME(_hx_pos_5f3781822f02f8a3_41_calculateArcs,"PieChartGen","calculateArcs",0xfe895c97,"PieChartGen.calculateArcs","Lib.hx",41,0x191c80b9)
HX_LOCAL_STACK_FRAME(_hx_pos_5f3781822f02f8a3_70_calculateMiddlePoints,"PieChartGen","calculateMiddlePoints",0x03f9800e,"PieChartGen.calculateMiddlePoints","Lib.hx",70,0x191c80b9)
HX_LOCAL_STACK_FRAME(_hx_pos_5f3781822f02f8a3_96_hexToTriad,"PieChartGen","hexToTriad",0x7eb38d88,"PieChartGen.hexToTriad","Lib.hx",96,0x191c80b9)
HX_LOCAL_STACK_FRAME(_hx_pos_5f3781822f02f8a3_119_calculateOneColor,"PieChartGen","calculateOneColor",0x33813ad3,"PieChartGen.calculateOneColor","Lib.hx",119,0x191c80b9)
HX_LOCAL_STACK_FRAME(_hx_pos_5f3781822f02f8a3_132_calculateColors,"PieChartGen","calculateColors",0xd17e31e6,"PieChartGen.calculateColors","Lib.hx",132,0x191c80b9)
HX_LOCAL_STACK_FRAME(_hx_pos_5f3781822f02f8a3_131_calculateColors,"PieChartGen","calculateColors",0xd17e31e6,"PieChartGen.calculateColors","Lib.hx",131,0x191c80b9)
HX_LOCAL_STACK_FRAME(_hx_pos_5f3781822f02f8a3_165_create,"PieChartGen","create",0x4ff51acc,"PieChartGen.create","Lib.hx",165,0x191c80b9)
HX_LOCAL_STACK_FRAME(_hx_pos_5f3781822f02f8a3_11_boot,"PieChartGen","boot",0x285da402,"PieChartGen.boot","Lib.hx",11,0x191c80b9)
HX_LOCAL_STACK_FRAME(_hx_pos_5f3781822f02f8a3_12_boot,"PieChartGen","boot",0x285da402,"PieChartGen.boot","Lib.hx",12,0x191c80b9)

void PieChartGen_obj::__construct() { }

Dynamic PieChartGen_obj::__CreateEmpty() { return new PieChartGen_obj; }

void *PieChartGen_obj::_hx_vtable = 0;

Dynamic PieChartGen_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< PieChartGen_obj > _hx_result = new PieChartGen_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool PieChartGen_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x50f3f6d6;
}

int PieChartGen_obj::SIZE;

int PieChartGen_obj::RADIUS;

::Array< Float > PieChartGen_obj::normalizeValues(::Array< Float > values){
            		HX_BEGIN_LOCAL_FUNC_S1(hx::LocalFunc,_hx_Closure_0,Float,sum) HXARGC(1)
            		Float _hx_run(Float v1){
            			HX_STACKFRAME(&_hx_pos_5f3781822f02f8a3_29_normalizeValues)
HXLINE(  29)			return ((Float)(v1 * (int)100) / (Float)sum);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_5f3781822f02f8a3_24_normalizeValues)
HXLINE(  25)		Float sum = (int)0;
HXLINE(  26)		{
HXLINE(  26)			int _g = (int)0;
HXDLIN(  26)			while((_g < values->length)){
HXLINE(  26)				Float v = values->__get(_g);
HXDLIN(  26)				_g = (_g + (int)1);
HXLINE(  27)				sum = (sum + v);
            			}
            		}
HXLINE(  29)		return values->map( ::Dynamic(new _hx_Closure_0(sum)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PieChartGen_obj,normalizeValues,return )

::Array< ::String > PieChartGen_obj::calculateArcs(::Array< Float > values){
            	HX_STACKFRAME(&_hx_pos_5f3781822f02f8a3_41_calculateArcs)
HXLINE(  42)		int a = (int)100;
HXLINE(  43)		::Array< ::String > ds = ::Array_obj< ::String >::__new(0);
HXLINE(  44)		Float oldX = (((Float)150.) + ((int)130 * ::Math_obj::cos(((Float)::Math_obj::PI / (Float)(int)2))));
HXLINE(  45)		Float oldY = (((Float)150.) - ((int)130 * ::Math_obj::sin(((Float)::Math_obj::PI / (Float)(int)2))));
HXLINE(  46)		Float totalAngle = (int)0;
HXLINE(  47)		{
HXLINE(  47)			int _g = (int)0;
HXDLIN(  47)			while((_g < values->length)){
HXLINE(  47)				Float v = values->__get(_g);
HXDLIN(  47)				_g = (_g + (int)1);
HXLINE(  48)				Float angle = ((Float)(((int)2 * ::Math_obj::PI) * v) / (Float)(int)100);
HXLINE(  49)				totalAngle = (totalAngle + angle);
HXLINE(  50)				Float newX = (((Float)150.) + ((int)130 * ::Math_obj::cos((totalAngle - ((Float)::Math_obj::PI / (Float)(int)2)))));
HXLINE(  51)				Float newY = (((Float)150.) + ((int)130 * ::Math_obj::sin((totalAngle - ((Float)::Math_obj::PI / (Float)(int)2)))));
HXLINE(  52)				int _hx_tmp;
HXDLIN(  52)				if ((angle < ::Math_obj::PI)) {
HXLINE(  52)					_hx_tmp = (int)0;
            				}
            				else {
HXLINE(  52)					_hx_tmp = (int)1;
            				}
HXDLIN(  52)				ds->push(((((((((((((((((((HX_("M ",33,43,00,00) + oldX) + HX_(" ",20,00,00,00)) + oldY) + HX_(" A ",df,80,18,00)) + (int)130) + HX_(" ",20,00,00,00)) + (int)130) + HX_(" 0 ",10,72,18,00)) + _hx_tmp) + HX_(" 1 ",ef,72,18,00)) + newX) + HX_(" ",20,00,00,00)) + newY) + HX_(" L ",74,8a,18,00)) + ((Float)150.)) + HX_(" ",20,00,00,00)) + ((Float)150.)) + HX_(" Z",3a,1c,00,00)));
HXLINE(  53)				oldX = newX;
HXLINE(  54)				oldY = newY;
            			}
            		}
HXLINE(  56)		return ds;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PieChartGen_obj,calculateArcs,return )

::Array< ::Dynamic> PieChartGen_obj::calculateMiddlePoints(::Array< Float > values,Float innerRadiusSize){
            	HX_STACKFRAME(&_hx_pos_5f3781822f02f8a3_70_calculateMiddlePoints)
HXLINE(  71)		::Array< ::Dynamic> ps = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  72)		Float totalAngle = (int)0;
HXLINE(  73)		{
HXLINE(  73)			int _g = (int)0;
HXDLIN(  73)			while((_g < values->length)){
HXLINE(  73)				Float v = values->__get(_g);
HXDLIN(  73)				_g = (_g + (int)1);
HXLINE(  74)				Float angle = ((Float)(::Math_obj::PI * v) / (Float)(int)100);
HXLINE(  75)				totalAngle = (totalAngle + angle);
HXLINE(  76)				Float labelRadius = (((int)130 * innerRadiusSize) + ((Float)((int)130 - ((int)130 * innerRadiusSize)) / (Float)(int)2));
HXLINE(  77)				Float newX = (((Float)150.) + (labelRadius * ::Math_obj::cos((totalAngle - ((Float)::Math_obj::PI / (Float)(int)2)))));
HXLINE(  78)				Float newY = (((Float)150.) + (labelRadius * ::Math_obj::sin((totalAngle - ((Float)::Math_obj::PI / (Float)(int)2)))));
HXLINE(  79)				 ::Dynamic p =  ::Dynamic(hx::Anon_obj::Create(2)
            					->setFixed(0,HX_("x",78,00,00,00),newX)
            					->setFixed(1,HX_("y",79,00,00,00),newY));
HXLINE(  80)				ps->push(p);
HXLINE(  81)				totalAngle = (totalAngle + angle);
            			}
            		}
HXLINE(  83)		return ps;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PieChartGen_obj,calculateMiddlePoints,return )

 ::Dynamic PieChartGen_obj::hexToTriad(::String hex){
            	HX_STACKFRAME(&_hx_pos_5f3781822f02f8a3_96_hexToTriad)
HXLINE(  98)		int cleanHex = (hex.indexOf(HX_("#",23,00,00,00),null()) + (int)1);
HXLINE(  97)		::Array< ::String > cleanHex1 = hex.substring(cleanHex,hex.length).split(HX_("",00,00,00,00));
HXLINE( 101)		 ::Dynamic color = ::Std_obj::parseInt(((HX_("0x",48,2a,00,00) + cleanHex1->__get((int)0)) + cleanHex1->__get((int)1)));
HXLINE( 102)		 ::Dynamic color1 = ::Std_obj::parseInt(((HX_("0x",48,2a,00,00) + cleanHex1->__get((int)2)) + cleanHex1->__get((int)3)));
HXLINE( 100)		 ::Dynamic color2 =  ::Dynamic(hx::Anon_obj::Create(3)
            			->setFixed(0,HX_("b",62,00,00,00),::Std_obj::parseInt(((HX_("0x",48,2a,00,00) + cleanHex1->__get((int)4)) + cleanHex1->__get((int)5))))
            			->setFixed(1,HX_("g",67,00,00,00),color1)
            			->setFixed(2,HX_("r",72,00,00,00),color));
HXLINE( 105)		return color2;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(PieChartGen_obj,hexToTriad,return )

int PieChartGen_obj::calculateOneColor(int c1,int c2,Float shift){
            	HX_STACKFRAME(&_hx_pos_5f3781822f02f8a3_119_calculateOneColor)
HXDLIN( 119)		return ::Std_obj::_hx_int((c1 + ((c2 - c1) * shift)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC3(PieChartGen_obj,calculateOneColor,return )

::Array< ::Dynamic> PieChartGen_obj::calculateColors(::cpp::VirtualArray baseColors,int valuesLength){
            		HX_BEGIN_LOCAL_FUNC_S0(hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::Dynamic _hx_run(::String c){
            			HX_STACKFRAME(&_hx_pos_5f3781822f02f8a3_132_calculateColors)
HXLINE( 132)			return ::PieChartGen_obj::hexToTriad(c);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_5f3781822f02f8a3_131_calculateColors)
HXLINE( 132)		::Array< ::Dynamic> rgbColors = baseColors->map( ::Dynamic(new _hx_Closure_0()));
HXLINE( 133)		::Array< ::Dynamic> newColors = ::Array_obj< ::Dynamic>::__new(0);
HXLINE( 135)		{
HXLINE( 135)			int _g1 = (int)0;
HXDLIN( 135)			int _g = valuesLength;
HXDLIN( 135)			while((_g1 < _g)){
HXLINE( 135)				_g1 = (_g1 + (int)1);
HXDLIN( 135)				int i = (_g1 - (int)1);
HXLINE( 136)				int colorPair = (i * (baseColors->get_length() - (int)1));
HXDLIN( 136)				Float colorPair1 = ((Float)colorPair / (Float)(valuesLength - (int)1));
HXLINE( 137)				int colorPairNumber = ::Math_obj::floor(colorPair1);
HXLINE( 138)				Float colorPairShift = (colorPair1 - colorPairNumber);
HXLINE( 139)				 ::Dynamic color;
HXLINE( 140)				if ((colorPairNumber == (baseColors->get_length() - (int)1))) {
HXLINE( 141)					color = rgbColors->__get(colorPairNumber);
            				}
            				else {
HXLINE( 144)					int color1 = ::PieChartGen_obj::calculateOneColor(( (int)(rgbColors->__get(colorPairNumber)->__Field(HX_("r",72,00,00,00),hx::paccDynamic)) ),( (int)(rgbColors->__get((colorPairNumber + (int)1))->__Field(HX_("r",72,00,00,00),hx::paccDynamic)) ),colorPairShift);
HXLINE( 145)					int color2 = ::PieChartGen_obj::calculateOneColor(( (int)(rgbColors->__get(colorPairNumber)->__Field(HX_("g",67,00,00,00),hx::paccDynamic)) ),( (int)(rgbColors->__get((colorPairNumber + (int)1))->__Field(HX_("g",67,00,00,00),hx::paccDynamic)) ),colorPairShift);
HXLINE( 143)					color =  ::Dynamic(hx::Anon_obj::Create(3)
            						->setFixed(0,HX_("b",62,00,00,00),::PieChartGen_obj::calculateOneColor(( (int)(rgbColors->__get(colorPairNumber)->__Field(HX_("b",62,00,00,00),hx::paccDynamic)) ),( (int)(rgbColors->__get((colorPairNumber + (int)1))->__Field(HX_("b",62,00,00,00),hx::paccDynamic)) ),colorPairShift))
            						->setFixed(1,HX_("g",67,00,00,00),color2)
            						->setFixed(2,HX_("r",72,00,00,00),color1));
            				}
HXLINE( 149)				newColors->push(color);
            			}
            		}
HXLINE( 152)		return newColors;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PieChartGen_obj,calculateColors,return )

::String PieChartGen_obj::create( ::Dynamic values, ::Dynamic params){
            	HX_STACKFRAME(&_hx_pos_5f3781822f02f8a3_165_create)
HXLINE( 195)		::String mask = ((((((HX_("\n      <mask id=\"donut-mask\">\n        <rect width=\"100%\" height=\"100%\" fill=\"white\"></rect>\n        <circle r=\"",09,a6,06,44) + ((int)130 *  ::Dynamic(params->__Field(HX_("innerRadiusSize",69,7b,4e,2f),hx::paccDynamic)))) + HX_("\" cx=\"",f8,37,c0,46)) + ((Float)150.)) + HX_("\" cy=\"",39,fa,c0,46)) + ((Float)150.)) + HX_("\" fill=\"black\"></circle>\n      </mask>\n    ",4f,30,4c,2f));
HXLINE( 202)		::String groups = HX_("",00,00,00,00);
HXLINE( 203)		::Array< ::String > ds = ::PieChartGen_obj::calculateArcs(::PieChartGen_obj::normalizeValues(( (::Array< Float >)(values) )));
HXLINE( 204)		::Array< Float > ps = ::PieChartGen_obj::normalizeValues(( (::Array< Float >)(values) ));
HXDLIN( 204)		::Array< ::Dynamic> ps1 = ::PieChartGen_obj::calculateMiddlePoints(ps,( (Float)(params->__Field(HX_("innerRadiusSize",69,7b,4e,2f),hx::paccDynamic)) ));
HXLINE( 205)		::Array< ::Dynamic> cs = ::PieChartGen_obj::calculateColors(( (::cpp::VirtualArray)(params->__Field(HX_("colors",b0,c5,86,c6),hx::paccDynamic)) ),( (int)(values->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)) ));
HXLINE( 206)		{
HXLINE( 206)			int _g1 = (int)0;
HXDLIN( 206)			int _g = ( (int)(values->__Field(HX_("length",e6,94,07,9f),hx::paccDynamic)) );
HXDLIN( 206)			while((_g1 < _g)){
HXLINE( 206)				_g1 = (_g1 + (int)1);
HXDLIN( 206)				int i = (_g1 - (int)1);
HXLINE( 207)				::String g = ((((((((((((HX_("\n        <g>\n          <path mask=\"url(#donut-mask)\" fill=\"rgb(",3a,e0,1c,2a) + ( (int)(cs->__get(i)->__Field(HX_("r",72,00,00,00),hx::paccDynamic)) )) + HX_(", ",74,26,00,00)) + ( (int)(cs->__get(i)->__Field(HX_("g",67,00,00,00),hx::paccDynamic)) )) + HX_(", ",74,26,00,00)) + ( (int)(cs->__get(i)->__Field(HX_("b",62,00,00,00),hx::paccDynamic)) )) + HX_(")\" stroke=\"rgb(",9f,32,19,08)) + ( (int)(cs->__get(i)->__Field(HX_("r",72,00,00,00),hx::paccDynamic)) )) + HX_(", ",74,26,00,00)) + ( (int)(cs->__get(i)->__Field(HX_("g",67,00,00,00),hx::paccDynamic)) )) + HX_(", ",74,26,00,00)) + ( (int)(cs->__get(i)->__Field(HX_("b",62,00,00,00),hx::paccDynamic)) )) + HX_(")\" d=\"",e2,6e,b4,0d));
HXDLIN( 207)				::String g1 = ((((g + ds->__get(i)) + HX_("\"></path>\n          <text fill=\"white\" stroke=\"none\" text-anchor=\"middle\" font-size=\"10px\" font-family=\"sans-serif\" x=\"",4c,38,55,ea)) + ( (Float)(ps1->__get(i)->__Field(HX_("x",78,00,00,00),hx::paccDynamic)) )) + HX_("\" y=\"",00,93,22,a9));
HXDLIN( 207)				::String g2 = ((g1 + (( (Float)(ps1->__get(i)->__Field(HX_("y",79,00,00,00),hx::paccDynamic)) ) + (int)5)) + HX_("\">",dc,1d,00,00));
HXDLIN( 207)				::String g3 = ((g2 + ( (::String)(values->__GetItem(i)) )) + HX_("</text>\n        </g>\n      ",74,d6,3c,4c));
HXLINE( 213)				groups = (groups + g3);
            			}
            		}
HXLINE( 217)		::String output = ((((((((HX_("\n      <svg viewBox=\"0 0 ",5d,18,b8,6c) + (int)300) + HX_(" ",20,00,00,00)) + (int)300) + HX_("\" preserveAspectRatio=\"xMinYMin meet\">\n        ",08,18,0f,60)) + mask) + HX_("\n        ",0a,8a,e8,e3)) + groups) + HX_("\n      </svg>\n    ",53,97,86,df));
HXLINE( 223)		return output;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(PieChartGen_obj,create,return )


PieChartGen_obj::PieChartGen_obj()
{
}

bool PieChartGen_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { outValue = create_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"hexToTriad") ) { outValue = hexToTriad_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"calculateArcs") ) { outValue = calculateArcs_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"normalizeValues") ) { outValue = normalizeValues_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"calculateColors") ) { outValue = calculateColors_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"calculateOneColor") ) { outValue = calculateOneColor_dyn(); return true; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"calculateMiddlePoints") ) { outValue = calculateMiddlePoints_dyn(); return true; }
	}
	return false;
}

#if HXCPP_SCRIPTABLE
static hx::StorageInfo *PieChartGen_obj_sMemberStorageInfo = 0;
static hx::StaticInfo PieChartGen_obj_sStaticStorageInfo[] = {
	{hx::fsInt,(void *) &PieChartGen_obj::SIZE,HX_HCSTRING("SIZE","\xc1","\x68","\x14","\x37")},
	{hx::fsInt,(void *) &PieChartGen_obj::RADIUS,HX_HCSTRING("RADIUS","\x52","\x7c","\x79","\x63")},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void PieChartGen_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(PieChartGen_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(PieChartGen_obj::SIZE,"SIZE");
	HX_MARK_MEMBER_NAME(PieChartGen_obj::RADIUS,"RADIUS");
};

#ifdef HXCPP_VISIT_ALLOCS
static void PieChartGen_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(PieChartGen_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(PieChartGen_obj::SIZE,"SIZE");
	HX_VISIT_MEMBER_NAME(PieChartGen_obj::RADIUS,"RADIUS");
};

#endif

hx::Class PieChartGen_obj::__mClass;

static ::String PieChartGen_obj_sStaticFields[] = {
	HX_HCSTRING("SIZE","\xc1","\x68","\x14","\x37"),
	HX_HCSTRING("RADIUS","\x52","\x7c","\x79","\x63"),
	HX_HCSTRING("normalizeValues","\x4f","\x57","\x82","\x22"),
	HX_HCSTRING("calculateArcs","\x67","\xf6","\x05","\x9d"),
	HX_HCSTRING("calculateMiddlePoints","\xde","\x69","\x5c","\x2a"),
	HX_HCSTRING("hexToTriad","\xb8","\xb1","\x1f","\xd7"),
	HX_HCSTRING("calculateOneColor","\xa3","\xfc","\x16","\xd2"),
	HX_HCSTRING("calculateColors","\xb6","\xdf","\xb0","\x7b"),
	HX_HCSTRING("create","\xfc","\x66","\x0f","\x7c"),
	::String(null())
};

void PieChartGen_obj::__register()
{
	hx::Object *dummy = new PieChartGen_obj;
	PieChartGen_obj::_hx_vtable = *(void **)dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_HCSTRING("PieChartGen","\x9e","\x52","\x66","\xf3");
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &PieChartGen_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mMarkFunc = PieChartGen_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(PieChartGen_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< PieChartGen_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = PieChartGen_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PieChartGen_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PieChartGen_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void PieChartGen_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_5f3781822f02f8a3_11_boot)
HXDLIN(  11)		SIZE = (int)300;
            	}
{
            	HX_STACKFRAME(&_hx_pos_5f3781822f02f8a3_12_boot)
HXDLIN(  12)		RADIUS = (int)130;
            	}
}

